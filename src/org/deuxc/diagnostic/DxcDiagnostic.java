package org.deuxc.diagnostic;

/**
 * A representation of a Diagnostic message generated by the compiler
 * 
*/
public class DxcDiagnostic implements Diagnostic {

    private final int position;
    private final DiagnosticSource diagnosticSource;
    private final DiagnosticInfo diagnosticInfo;
    private final DiagnosticFormatter<DxcDiagnostic> formatter;
    
    /**
     * A diagnostic key object encapsulates basic properties of a diagnostic,
     * such the type, template, and arguments of the message to be proccessed by the formatter
     */
    public static abstract class DiagnosticInfo {
        private DiagnosticType type;
        private String template;
        private String[] args;

        protected DiagnosticInfo(DiagnosticType type, String template, String... args) {
            this.type = type;
            this.template = template;
            this.args = args;
        }

        public DiagnosticType getType() {
            return type;
        }

        public String getTemplate() {
            return template;
        }

        public String[] getArgs() {
            return args;
        }
    }

    /**
     * Represents an error diagnostic within the context of diagnostic information.
     * Instances of this class convey information about errors that occurred during
     * processing.
     */
    public static final class Error extends DiagnosticInfo {

        protected Error(String template, String[] args) {
            super(DiagnosticType.ERROR, template, args);
        }
    }


    /**
     * Constructs a new DxcDiagnostic with the provided diagnostic information and
     * source.
     *
     * @param diagnosticInfo   The information associated with the diagnostic.
     * @param diagnosticSource The source of the diagnostic information.
     */
    public DxcDiagnostic(
        int position,
        DiagnosticInfo diagnosticInfo,
        DiagnosticSource diagnosticSource,
        DiagnosticFormatter<DxcDiagnostic> formatter
    ) {
        this.position = position;
        this.diagnosticInfo = diagnosticInfo;
        this.diagnosticSource = diagnosticSource;
        this.formatter = formatter;
    }


    @Override
    public DiagnosticType getType() {
        return diagnosticInfo.type;
    }

    @Override
    public long getPosition() {
        return position;
    }

    @Override
    public long getLineNumber() {
        return diagnosticSource.getLineNumber(position);
    }


    @Override
    public String getLineCode() {
        return diagnosticSource.getLine(position).orElse("<no-line-available>");
    }


    @Override
    public long getColumnNumber() {
        return diagnosticSource.getColumnNumber(position);
    }

    @Override
    public String toString() {
        return formatter.format(this);
    }

}
