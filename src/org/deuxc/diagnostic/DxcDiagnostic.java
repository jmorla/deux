package org.deuxc.diagnostic;

/**
 * A representation of a Diagnostic message generated by the compiler
 * 
*/
public class DxcDiagnostic implements Diagnostic {
    
 
    /**
     * A diagnostic key object encapsulates basic properties of a diagnostic,
     * such the type, template, and arguments of the message to be proccessed by the formatter
     */
    public static abstract class DiagnosticInfo {
        private DiagnosticType type;
        private String template;
        private String[] args;

        protected DiagnosticInfo(DiagnosticType type, String template, String... args) {
            this.type = type;
            this.template = template;
            this.args = args;
        }

        public DiagnosticType getType() {
            return type;
        }

        public String getTemplate() {
            return template;
        }

        public String[] getArgs() {
            return args;
        }
    }


    public static final class Error extends DiagnosticInfo {

        protected Error(String template, String[] args) {
            super(DiagnosticType.ERROR, template, args);
        }
    }
    
    private final DiagnosticInfo diagnosticTemplate;

    private DxcDiagnostic(DiagnosticInfo diagnosticTemplate) {
        this.diagnosticTemplate = diagnosticTemplate;
    }


    @Override
    public DiagnosticType getType() {
        return diagnosticTemplate.type;
    }

    @Override
    public long getStartPosition() {
        throw new UnsupportedOperationException("Unimplemented method 'getStartPosition'");
    }

    @Override
    public long getEndPosition() {
        throw new UnsupportedOperationException("Unimplemented method 'getEndPosition'");
    }

    @Override
    public long getLineNumber() {
        throw new UnsupportedOperationException("Unimplemented method 'getLineNumber'");
    }

}
